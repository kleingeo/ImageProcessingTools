# Workflow to build wheels for upload to PyPI.
# Inspired by pandas's cibuildwheel config https://github.com/pandas-dev/pandas/blob/main/.github/workflows/wheels.yml

name: Build and Publish

on:
  push:
    tags:
      - '*'
  workflow_dispatch:



jobs:
#  build_sdist:
#    name: Build sdist
#    runs-on: ubuntu-22.04
#    env:
#      IS_PUSH: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
#      IS_WORKFLOW_DISPATCH: ${{ github.event_name == 'workflow_dispatch' }}
##      IS_SCHEDULE_DISPATCH: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
#    outputs:
#      sdist_file: ${{ steps.save-path.outputs.sdist_name }}
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#
#
#      - name: Get Tag
#        run: |
#          TAG=${{ github.ref_name }}
#          echo "PACKAGE_VERSION=${TAG#v}" >> $GITHUB_ENV
#        shell: bash -el {0}
#
#      - name: Test tag
#        run: echo $PACKAGE_VERSION
#        shell: bash -el {0}
#
#
#      - name: Set up Python
#        uses: actions/setup-python@v4
#        with:
#          python-version: '3.11'
#
#      - name: Build sdist
#        run: |
#          python -m pip install build
#          python -m build --sdist
#
#      - uses: actions/upload-artifact@v3
#        with:
#          name: sdist
#          path: ./dist/*
#
#      - name: Sanity check sdist files
#        run: |
#          ls ./dist
#
#      - name: Output sdist name
#        id: save-path
#        shell: bash -el {0}
#        run: echo "sdist_name=$(ls ./dist)" >> "$GITHUB_OUTPUT"

  build_wheels:
#    needs: build_sdist
    name: Build wheel for ${{ matrix.python }}-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # GitHub Actions doesn't support pairing matrix values together, let's improvise
        # https://github.com/github/feedback/discussions/7835#discussioncomment-1769026
        os: [ubuntu-latest, windows-latest, macos-latest]
        python: ["3.7", "3.8", "3.9", "3.10", "3.11"]
#        os: [ubuntu-latest]
#        python: ["3.10"]
#        buildplat:
#        - [ubuntu-22.04, manylinux_x86_64]
#        - [ubuntu-22.04, musllinux_x86_64]
#        - [macos-12, macosx_*]
#        - [windows-2022, win_amd64]
#        python: [["cp37", "3.7"], ["cp38", "3.8"], ["cp39", "3.9"], ["cp310", "3.10"], ["cp311", "3.11"]]#, ["cp312", "3.12"]]
#    env:
#      IS_PUSH: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
#      IS_SCHEDULE_DISPATCH: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    env:
      IS_PUSH: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
      IS_WORKFLOW_DISPATCH: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Tag
        run: |
          TAG=${{ github.ref_name }}
          echo "PACKAGE_VERSION=${TAG#v}" >> $GITHUB_ENV
        shell: bash -el {0}

      - name: Test tag
        run: echo $PACKAGE_VERSION
        shell: bash -el {0}

#      # TODO: Build wheels from sdist again
#      # There's some sort of weird race condition?
#      # within Github that makes the sdist be missing files
#
#      # We need to build wheels from the sdist since the sdist
#      # removes unnecessary files from the release
#      - name: Download sdist (not macOS)
#        if: ${{ matrix.buildplat != 'macos_*' }}
#        uses: actions/download-artifact@v3
#        with:
#          name: sdist
#          path: ./dist
#
#      - name: Output sdist name (macOS)
#        id: save-path
#        shell: bash -el {0}
#        run: echo "sdist_name=$(ls ./dist)" >> "$GITHUB_ENV"
#
#      # Python version used to build sdist doesn't matter
#      # wheel will be built from sdist with the correct version
#      - name: Unzip sdist (macOS)
#        if: ${{ matrix.buildplat[0] == 'macos_*' }}
#        run: |
#          tar -xzf ./dist/${{ env.sdist_name }} -C ./dist
#
#      - name: Output sdist name (macOS)
#        id: save-path2
#        shell: bash -el {0}
#        run: echo "sdist_name=$(cd ./dist && ls -d */)" >> "$GITHUB_ENV"

#      - name: Set up Python
#        uses: mamba-org/setup-micromamba@v1
#        with:
#          environment-name: wheel-env
#          create-args: >-
#            python=${{ matrix.python }}
#            anaconda-client
#            wheel
#            setuptools
#            setuptools-git-versioning
#            build
#            conda-build
#            twine
#          condarc: |
#            channels:
#              - simpleitk
#              - conda-forge
#              - defaults
#          cache-downloads: true
#          cache-environment: true
#          init-shell: >-
#            bash
#            powershell
#


      - name: Set up Python
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python }}
          activate-environment: wheel-env
#          channels: simpleitk,conda-forge,defaults

      - name: Install dependencies
        run: |
          conda install anaconda-client wheel setuptools setuptools-git-versioning build conda-build twine
        shell: bash -el {0}


#      - name: Build wheels
#        uses: pypa/cibuildwheel@v2.15.0
#        with:
#         package-dir: ./dist/${{ matrix.buildplat[1] == 'macosx_*' && env.sdist_name || needs.build_sdist.outputs.sdist_file }}
#        env:
#          CIBW_PRERELEASE_PYTHONS: True
#          CIBW_BUILD: ${{ matrix.python[0] }}-${{ matrix.buildplat[1] }}
#          CIBW_BUILD_VERBOSITY: 1

#      - name: Build wheels
##        with:
##          package-dir: ./dist/${{ matrix.buildplat[1] == 'macosx_*' && env.sdist_name || needs.build_sdist.outputs.sdist_file }}
#        run: python -m build --wheel --outdir ./dist
#        shell: bash -el {0}


#      - uses: actions/upload-artifact@v3
#        with:
#          name: ${{ matrix.python }}-${{ startsWith(matrix.buildplat[0], 'macosx') && 'macosx' || matrix.buildplat[0] }}
#          path: ./wheelhouse/*.whl


#      - name: Upload wheels & sdist
#        if: ${{ success() && (env.IS_PUSH == 'true' || env.IS_WORKFLOW_DISPATCH == 'true') }}
#        shell: bash -el {0}
#        env:
#          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
#
#
#        # trigger an upload to
#        # https://anaconda.org/scientific-python-nightly-wheels/pandas
#        # for cron jobs or "Run workflow" (restricted to main branch).
#        # Tags will upload to
#        # https://anaconda.org/multibuild-wheels-staging/pandas
#        # The tokens were originally generated at anaconda.org
#        run: |
#          source conda/upload_wheels.sh
#          set_upload_vars
#          upload_wheels


      - name: Build Conda Package
        if: ${{ success() && (env.IS_PUSH == 'true' || env.IS_WORKFLOW_DISPATCH == 'true') }}
#        run: conda build -c conda-forge -c SimpleITK --output-folder ./conda-bld/py-${{ matrix.python }}-${{ matrix.os }} ./conda
        run: conda build -c conda-forge -c SimpleITK --output-folder ./conda-bld/py-${{ matrix.python }}-${{ matrix.os }} ./conda
        shell: bash -el {0}

      - name: Upload conda package
        if: ${{ success() && (env.IS_PUSH == 'true' || env.IS_WORKFLOW_DISPATCH == 'true') }}
        run: anaconda -t ${{ secrets.ANACONDA_TOKEN_MEDIPT }} upload ./conda-bld/py-${{ matrix.python }}-${{ matrix.os }}/*/*.tar.bz2
        shell: bash -el {0}

#      - name: Publish to PyPI
#        if: startsWith(github.ref, 'refs/tags/v') || contains(github.ref, 'refs/tags/v*')
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          password: ${{ secrets.PYPI_API_TOKEN }}
#          packages-dir: ./dist